* Get Started, Part 1: Orientation and setup

** A brief explanation of images and containers  :drill:
An [image] is a lightweight, stand-alone, executable package that includes everything needed to run a 
piece of software, including the code, a runtime, libraries, environment variables, and config files.

** A brief explanation of containers  :drill:
A [container] is a runtime instance of an [image] — what the [image] becomes in memory when actually 
executed. It runs completely isolated from the host environment by default, only accessing host files 
and ports if configured to do so.

** A brief explanation of containers and VMs  :drill:
Containers run apps natively on the [host] machine’s kernel. They have better performance characteristics 
than [virtual machines] that only get virtual access to host resources through a [hypervisor]. Containers can 
get native access, each one running in a discrete [process], taking no more memory than any other executable.

** Virtual machine stack example  :drill:
Virtual machines run [guest] operating systems — note the OS layer in each box. This is resource intensive, 
and the resulting disk image and application state is an entanglement of OS settings, system-installed 
dependencies, OS security patches, and other easy-to-lose, hard-to-replicate ephemera.

** Container stack example  :drill:
The only information that needs to be in a container image is the executable and its package dependencies,
which never need to be installed on the [host system]. These processes run like [native] processes.

** Define a Container  :drill:
The [Dockerfile] defines what goes on in the environment inside your container. Access to resources like 
networking interfaces and disk drives is virtualized inside this environment, which is isolated from the rest 
of your system, so you have to map ports to the outside world, and be specific about what files you 
want to “copy in” to that environment. However, after doing that, you can expect that the build of 
your app defined in this Dockerfile will behave exactly the same wherever it runs.

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to use an official Python runtime as a parent image (version 2.7-slim):
[FROM python:2.7-slim]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to set the working directory to /app
[WORKDIR /app]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to copy the current directory contents into the container at /app
[ADD . /app]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to install any needed packages specified in requirements.txt using pip
[RUN pip install -r requirements.txt]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to make port 80 available to the world outside this container
[EXPOSE 80]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to define an environment variable named World
[ENV NAME World]

** Dockerfile Syntax Questions  :drill:
Dockerfile instruction to run app.py when the container launches
[CMD \["python", "app.py"\]]

** Build Command Syntax  :drill:
Now run the build command. This creates a Docker image, which we’re going to tag using -t so it has 
a friendly name (ie friendlyhello):  [docker build -t friendlyhello .]
Where is your built image? [It’s in your machine’s local Docker image registry:]

** How do you see Docker images on your machine?  :drill:
[docker images]

** View running Docker containers  :drill:
[docker ps]

** Stop a running Docker container  :drill:
[docker stop 1fa4ab2cf395]

** Docker Registries  :drill:
A registry is a collection of [repositories], and a [repository] is a collection of [images] — sort of like 
a GitHub repository, except the code is already built. An account on a [registry] can create many 
[repositories]. The docker CLI uses Docker’s public registry by default.

** Command to login to a Docker registry  :drill:
[docker login]

** Tag the image  :drill:
The notation for associating a local image with a repository on a registry is [username/repository:tag]
The tag is optional, but recommended, since it is the mechanism that registries use to give Docker 
images a version.

To tag an image with your username, repository, and tag names so that the image will upload to your 
desired destination. The syntax of the command is:  [docker tag image username/repository:tag]

** List Docker images  :drill:
Run [docker images] to see your newly tagged image. (You can also use [docker image ls].)

** Publish the image
Upload your tagged image to the repository:
[docker push username/repository:tag]

** Pull and run the image from the remote repository  :drill:
From now on, you can use docker run and run your app on any machine with this command:
[docker run -p 4000:80 username/repository:tag]

If the image isn’t available locally on the machine, Docker will [pull it from the repository].

** Docker Cheatsheet  :drill:
docker build -t imagename .                 [ Create image using this directory's Dockerfile ]
docker run -p 4000:80 imagename             [ Run "imagename" mapping port 4000 to 80 ]
docker run -d -p 4000:80 imagename          [ Same thing, but in detached mode ]
docker images -a                            [ Show all images on this machine ]

** Docker Cheatsheet  :drill:
docker ps                                   [ See a list of all running containers ]
docker ps -a                                [ See a list of all containers, even the ones not running ]
docker stop <hash>                          [ Gracefully stop the specified container ]
docker kill <hash>                          [ Force shutdown of the specified container ]

** Docker Cheatsheet  :drill:
docker rm <hash>                            [ Remove the specified container from this machine ]
docker rm $(docker ps -a -q)             // [ Remove all containers from this machine ]
docker rmi <imagename>                      [ Remove the specified image from this machine ]
docker rmi $(docker images -q)           // [ Remove all images from this machine ]

** Docker Cheatsheet  :drill:
docker login                                [ Log in this CLI session using your Docker credentials ]
docker tag <image> username/repository:tag  [ Tag <image> for upload to registry ]
docker push username/repository:tag         [ Upload tagged image to registry ]
docker run username/repository:tag          [ Run image from a registry ]

** Docker Command Cheat Sheet  :drill:
[docker build -t imagename .]                 # Create image using this directory's Dockerfile

** Docker Command Cheat Sheet  :drill:
[docker run -p 4000:80 imagename]             # Run "imagename" mapping port 4000 to 80

** Docker Command Cheat Sheet  :drill:
[docker run -d -p 4000:80 imagename]          # Run mapping port 4000 to 80 in detached mode

** Docker Command Cheat Sheet  :drill:
[docker ps]                                   # See a list of all running containers

** Docker Command Cheat Sheet  :drill:
[docker stop <hash>]                          # Gracefully stop the specified container

** Docker Command Cheat Sheet  :drill:
[docker ps -a]                                # See a list of all containers, even the ones not running

** Docker Command Cheat Sheet  :drill:
[docker kill <hash>]                          # Force shutdown of the specified container

** Docker Command Cheat Sheet  :drill:
[docker rm <hash>]                            # Remove the specified container from this machine

** Docker Command Cheat Sheet  :drill:
[docker rm $(docker ps -a -q) // ]            # Remove all containers from this machine

** Docker Command Cheat Sheet  :drill:
[docker images -a]                            # Show all images on this machine

** Docker Command Cheat Sheet  :drill:
[docker rmi <imagename>]                      # Remove the specified image from this machine

** Docker Command Cheat Sheet  :drill:
[docker rmi $(docker images -q) // ]          # Remove all images from this machine

** Docker Command Cheat Sheet  :drill:
[docker login]                                # Log in this CLI session using your Docker credentials

** Docker Command Cheat Sheet  :drill:
[docker tag <image> username/repository:tag]  # Tag <image> for upload to registry

** Docker Command Cheat Sheet  :drill:
[docker push username/repository:tag]         # Upload tagged image to registry

** Docker Command Cheat Sheet  :drill:
[docker run username/repository:tag]          # Run image from a registry
